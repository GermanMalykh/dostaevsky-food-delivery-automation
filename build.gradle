plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.11.2'
    id "io.freefair.lombok" version "8.0.1"
}

group 'guru.qa'
version '1.0-SNAPSHOT'

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

java.sourceCompatibility = JavaVersion.VERSION_11
java.targetCompatibility = JavaVersion.VERSION_11

def junit5Version = '5.9.3'
def selenideVersion = '6.13.0'
def selenideAppiumVersion = '2.7.1'
def appiumVersion = '8.3.0'
def slf4jVersion = '2.0.7'
def allureVersion = '2.21.0'
def assertjVersion = '3.24.2'
def restAssuredVersion = '5.3.0'
def ioVersion = '2.12.0'
def jacksonVersion = '2.15.2'
def javaJsonVersion = '20230227'
def ownerVersion = '1.0.12'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation(
            "org.junit.jupiter:junit-jupiter:${junit5Version}",
            "com.codeborne:selenide:${selenideVersion}",
            "io.qameta.allure:allure-selenide:${allureVersion}",
            "org.slf4j:slf4j-simple:${slf4jVersion}",
            "org.assertj:assertj-core:${assertjVersion}",
            "io.rest-assured:rest-assured:${restAssuredVersion}",
            "com.codeborne:selenide-appium:${selenideAppiumVersion}",
            "io.appium:java-client:${appiumVersion}",
            "io.qameta.allure:allure-rest-assured:${allureVersion}",
            "commons-io:commons-io:${ioVersion}",
            "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}",
            "org.json:json:${javaJsonVersion}",
            "org.aeonbits.owner:owner:${ownerVersion}"
    )
}

allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

tasks.register('apiTests', Test) {
    useJUnitPlatform {
        includeTags("api")
    }
    description = 'Запускает все API тесты'
}

tasks.register('webRemoteTests', Test) {
    useJUnitPlatform {
        includeTags("web")
    }
    systemProperty "env", "remote"
    description = 'Запускает все Web тесты удаленно'
}

tasks.register('androidRemoteTests', Test) {
    useJUnitPlatform {
        includeTags("android")
        excludeTags("only-local")
    }
    systemProperty "env", "remote"
    description = 'Запускает все Android тесты удаленно, исключая тесты с меткой only-local'
}

tasks.register('runAllTestsRemote') {
    group = 'verification'
    description = 'Запускает все тесты удаленно параллельно (Android + Web + API)'
    dependsOn 'androidRemoteTests', 'webRemoteTests', 'apiTests'
}

tasks.register('webLocalTests', Test) {
    useJUnitPlatform {
        includeTags("web")
    }
    systemProperty "env", "local"
    description = 'Запускает все Web тесты локально'
}

tasks.register('androidLocalTests', Test) {
    useJUnitPlatform {
        includeTags("android")
    }
    systemProperty "env", "local"
    description = 'Запускает все Android тесты локально'
}

tasks.register('runAllTestsLocal') {
    group = 'verification'
    description = 'Запускает все тесты локально последовательно (Android → Web → API)'

    doLast {
        exec {
            commandLine './gradlew', 'androidLocalTests'
        }
        exec {
            commandLine './gradlew', 'webLocalTests'
        }
        exec {
            commandLine './gradlew', 'apiTests'
        }
    }
}
