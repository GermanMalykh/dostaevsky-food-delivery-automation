package ru.dostaevsky.tests.api.client;

import io.qameta.allure.Description;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.ValidatableResponse;
import ru.dostaevsky.tests.api.constants.Endpoints;
import ru.dostaevsky.tests.api.models.UpdateItemCountInBasketRequest;
import ru.dostaevsky.tests.api.specs.RestSpecs;

import java.util.HashMap;
import java.util.Map;

public class DostaevskyApiClient {

    /**
     * Getting info about items in basket.
     *
     * @param cookieValue User cookie
     * @return All response
     */
    @Description("GET../basket/info")
    public ValidatableResponse gettingBasketInfo(String cookieValue) {
        Map<String, String> headers = new HashMap<>();
        headers.put("X-Requested-With", "XMLHttpRequest");
        headers.put("Cookie", cookieValue);
        return RestAssured.given(RestSpecs.requestSpecification)
                .contentType(ContentType.JSON)
                .headers(headers)
                .get(Endpoints.BASKET_INFO)
                .then()
                .spec(RestSpecs.responseSpecification);
    }

    /**
     * Adding item to basket.
     *
     * @param cookieValue User cookie
     * @param itemId      Item ID. Example {@link ru.dostaevsky.enums.BurgerId}
     * @return All response
     */
    @Description("GET../basket/add_to_basket?item_id=%")
    public ValidatableResponse addingItemToBasket(String cookieValue, String itemId) {
        Map<String, String> headers = new HashMap<>();
        headers.put("Cookie", cookieValue);
        return RestAssured.given(RestSpecs.requestSpecification)
                .contentType(ContentType.JSON)
                .headers(headers)
                .get(String.format(Endpoints.ADD_ITEM_TO_BASKET, itemId))
                .then()
                .spec(RestSpecs.responseSpecification);
    }

    /**
     * Remove item from basket.
     *
     * @param cookieValue User cookie
     * @param itemId      Item ID. Example {@link ru.dostaevsky.enums.BurgerId}
     * @param itemUid     Item UID (Autogenerated)
     * @return All response
     */
    @Description("GET../ajax/basket/basket_item_handler?action=removeItem&item_id=%&item_uid=%")
    public ValidatableResponse removeItemFromBasket(String cookieValue, String itemId, String itemUid) {
        Map<String, String> headers = new HashMap<>();
        headers.put("Cookie", cookieValue);
        return RestAssured.given(RestSpecs.requestSpecification)
                .contentType(ContentType.JSON)
                .headers(headers)
                .get(String.format(Endpoints.REMOVE_ITEM_FROM_BASKET, itemId, itemUid))
                .then()
                .spec(RestSpecs.responseSpecification);
    }

    /**
     * Update item count in the basket.
     *
     * @param cookieValue                    User cookie
     * @param updateItemCountInBasketRequest Body include item_id, quantity
     * @return All response
     */
    @Description("PATCH../basket/update-item-count")
    public ValidatableResponse updateItemCountInBasket(String cookieValue, UpdateItemCountInBasketRequest updateItemCountInBasketRequest) {
        Map<String, String> headers = new HashMap<>();
        headers.put("Cookie", cookieValue);
        headers.put("X-Requested-With", "XMLHttpRequest");
        return RestAssured.given(RestSpecs.requestSpecification)
                .contentType(ContentType.JSON)
                .headers(headers)
                .body(updateItemCountInBasketRequest)
                .patch((Endpoints.UPDATE_ITEM_COUNT_IN_BASKET))
                .then()
                .spec(RestSpecs.responseSpecification);
    }

    /**
     * Getting reviews.
     *
     * @param token      X-Auth-Token
     * @param limitValue Minimal count returned reviews
     * @return All response
     */
    @Description("GET../reviews?limit=% - Getting reviews")
    public ValidatableResponse gettingReviews(String token, Integer limitValue) {
        Map<String, String> headers = new HashMap<>();
        headers.put("X-Auth-Token", token);
        Map<String, Integer> params = new HashMap<>();
        params.put("limit", limitValue);
        return RestAssured.given(RestSpecs.requestSpecification)
                .contentType(ContentType.JSON)
                .headers(headers)
                .queryParams(params)
                .get(Endpoints.GETTING_REVIEWS)
                .then()
                .spec(RestSpecs.responseSpecification);
    }

    /**
     * Login in system.
     *
     * @param phoneValue   User phone number
     * @param smsCodeValue SMS for login
     * @return All response
     */
    @Description("POST../auth/login")
    public ValidatableResponse loginInSystem(String phoneValue, String smsCodeValue) {
        return RestAssured.given(RestSpecs.requestSpecification)
                .contentType(ContentType.MULTIPART)
                .multiPart("phone", phoneValue)
                .multiPart("user_sms_confirm_code", smsCodeValue)
                .post(Endpoints.LOGIN)
                .then()
                .spec(RestSpecs.responseSpecification);
    }

}
